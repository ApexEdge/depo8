---
import Footer from '../../components/Footer.astro';
import StatsChart from '../../components/StatsChart.astro';
import { fetchRatings, type Rating } from '../../utils/api';

async function getFeedbackStats() {
  try {
    const { data: ratings, error } = await fetchRatings();
    
    if (error) {
      console.warn('Using fallback data due to error:', error);
    }

    const totalRatings = ratings.length;
    const averageRating = totalRatings > 0 
      ? (ratings.reduce((acc, curr) => acc + curr.rating, 0) / totalRatings)
      : 0;
      
    const currentMonth = new Date().getMonth();
    const currentMonthRatings = ratings.filter(rating => {
      const ratingDate = new Date(rating.created_at);
      return ratingDate.getMonth() === currentMonth;
    }).length;

    return {
      total: totalRatings,
      average: averageRating,
      monthly: currentMonthRatings
    };
  } catch (error) {
    console.error('Stats Error:', error);
    return { total: 0, average: 0, monthly: 0 };
  }
}

const stats = await getFeedbackStats();
---

<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <title>Dashboard Admin</title>
</head>

<div class="dashboard-container">
  <nav class="sidebar">
    <div class="logo">
      <h2>Panneau d'administration</h2>
    </div>
    <ul class="nav-links">
      <li><a href="#" class="active">Vue d'ensemble</a></li>
      <li><a href="#products">Produits</a></li>
      <li><a href="#users">Utilisateurs</a></li>
      <li><a href="#reviews">Évaluations</a></li>
      <li><a href="#stats">Statistiques</a></li>
      <li><a href="#settings">Paramètres</a></li>
      <li><button id="logoutBtn" class="logout-btn">Déconnexion</button></li>
    </ul>
  </nav>

  <main class="main-content">
    <header class="top-bar">
      <h1>Tableau de bord</h1>
      <div class="user-info">
        <span>Admin</span>
      </div>
    </header>

    <div class="dashboard-content">
      <div class="stats-grid">
        <div class="stat-card">
          <h3>Évaluations totales</h3>
          <p class="stat-number" data-value={stats.total}>{stats.total.toLocaleString('fr-FR')}</p>
          <div class="stat-loading hidden">Chargement...</div>
        </div>
        <div class="stat-card">
          <h3>Note moyenne</h3>
          <p class="stat-number" data-value={stats.average.toFixed(1)}>
            {stats.average.toLocaleString('fr-FR', { minimumFractionDigits: 1, maximumFractionDigits: 1 })}
            <span class="stat-unit">/5</span>
          </p>
          <div class="stat-loading hidden">Chargement...</div>
        </div>
        <div class="stat-card">
          <h3>Ce mois</h3>
          <p class="stat-number" data-value={stats.monthly}>{stats.monthly.toLocaleString('fr-FR')}</p>
          <div class="stat-loading hidden">Chargement...</div>
        </div>
      </div>
      
      <StatsChart />
      
      <div class="recent-activity">
        <h3>Activité récente</h3>
        <div class="activity-list">
          {stats.total > 0 ? (
            <p>Dernières évaluations chargées avec succès.</p>
          ) : (
            <p class="empty-state">Aucune évaluation pour le moment.</p>
          )}
        </div>
      </div>
    </div>
  </main>
</div>

<style is:global>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
  }

  body {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .dashboard-container {
    display: flex;
    min-height: 100vh;
  }

  .sidebar {
    width: 250px;
    background: #1e293b;
    color: white;
    padding: 1rem;
  }

  .logo h2 {
    color: white;
    padding: 1rem;
    margin-bottom: 2rem;
  }

  .nav-links {
    list-style: none;
    padding: 0;
  }

  .nav-links a {
    display: block;
    padding: 0.75rem 1rem;
    color: white;
    text-decoration: none;
    transition: all 0.3s;
  }

  .nav-links a:hover, .nav-links a.active {
    background: #2563eb;
    border-radius: 0.5rem;
  }

  .main-content {
    flex: 1;
    background: #f8fafc;
  }

  .top-bar {
    background: white;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .dashboard-content {
    padding: 2rem;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: white;
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .stat-number {
    font-size: 2rem;
    font-weight: bold;
    color: #2563eb;
    margin-top: 0.5rem;
  }

  .stat-unit {
    font-size: 1rem;
    color: #64748b;
    margin-left: 4px;
  }

  .stat-loading {
    font-size: 0.875rem;
    color: #64748b;
    margin-top: 0.5rem;
  }

  .hidden {
    display: none;
  }

  .logout-btn {
    width: 100%;
    padding: 0.75rem;
    margin-top: 2rem;
    background: #dc2626;
    color: white;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.3s;
  }

  .logout-btn:hover {
    background: #b91c1c;
  }

  .recent-activity {
    background: white;
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-top: 2rem;
  }

  .recent-activity h3 {
    color: #1e293b;
    margin-bottom: 1rem;
  }

  .activity-list {
    color: #64748b;
  }

  .empty-state {
    text-align: center;
    padding: 2rem;
    color: #94a3b8;
  }
</style>

<script>
  import { fetchRatings } from '../../utils/api';

  // Vérification de l'authentification
  if (!sessionStorage.getItem('adminAuthenticated')) {
    window.location.href = '/admin/login';
  }

  // Gestion de la déconnexion
  document.getElementById('logoutBtn')?.addEventListener('click', () => {
    sessionStorage.removeItem('adminAuthenticated');
    window.location.href = '/admin/login';
  });

  // Actualisation automatique des statistiques
  async function updateStats() {
    try {
      const loadingElements = document.querySelectorAll('.stat-loading');
      loadingElements.forEach(el => el.classList.remove('hidden'));

      const { data: ratings, error } = await fetchRatings();
      
      if (error) {
        throw new Error(error);
      }

      // Calculate stats
      const totalRatings = ratings.length;
      const averageRating = totalRatings > 0 
        ? (ratings.reduce((acc, curr) => acc + curr.rating, 0) / totalRatings)
        : 0;
        
      const currentMonth = new Date().getMonth();
      const currentMonthRatings = ratings.filter(rating => {
        const ratingDate = new Date(rating.created_at);
        return ratingDate.getMonth() === currentMonth;
      }).length;

      // Update UI with properly formatted numbers
      document.querySelector('[data-value="total"]').textContent = 
        totalRatings.toLocaleString('fr-FR');
      document.querySelector('[data-value="average"]').textContent = 
        averageRating.toLocaleString('fr-FR', { minimumFractionDigits: 1, maximumFractionDigits: 1 });
      document.querySelector('[data-value="monthly"]').textContent = 
        currentMonthRatings.toLocaleString('fr-FR');

    } catch (error) {
      console.error('Update Error:', error);
    } finally {
      const loadingElements = document.querySelectorAll('.stat-loading');
      loadingElements.forEach(el => el.classList.add('hidden'));
    }
  }

  // Initial update
  updateStats();
  // Regular updates
  setInterval(updateStats, 30000);
</script>
